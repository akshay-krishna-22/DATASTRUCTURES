#include <stdio.h>
#include <stdlib.h>

#define TABLE_SIZE 10
#define INITIAL_SIZE 10
#define LOAD_FACTOR 0.7

typedef struct Node {
    int key;
    struct Node* next;
} Node;

typedef struct {
    int *table;
    int size;
    int count;
} HashTable;

int hash(int key, int size) {
    return key % size;
}

// Open Addressing
void insertOpenAddressing(int hash_table[], int key) {
    int index = hash(key, TABLE_SIZE);
    int original_index = index;
    int i = 1;
    while (hash_table[index] != -1) {
        index = (original_index + i) % TABLE_SIZE;
        i++;
        if (index == original_index) {
            printf("Hash table is full\n");
            return;
        }
    }
    hash_table[index] = key;
}

void displayOpenAddressing(int hash_table[]) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        if (hash_table[i] != -1)
            printf("Index %d: %d\n", i, hash_table[i]);
        else
            printf("Index %d: \n", i);
    }
}

// Chaining
void insertChaining(Node* hash_table[], int key) {
    int index = hash(key, TABLE_SIZE);
    Node* new_node = (Node*)malloc(sizeof(Node));
    new_node->key = key;
    new_node->next = hash_table[index];
    hash_table[index] = new_node;
}

void displayChaining(Node* hash_table[]) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        printf("Index %d: ", i);
        Node* temp = hash_table[i];
        while (temp) {
            printf("%d -> ", temp->key);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}

// Rehashing
void rehash(HashTable* ht) {
    int old_size = ht->size;
    int* old_table = ht->table;
    ht->size *= 2;
    ht->table = (int*)malloc(ht->size * sizeof(int));
    ht->count = 0;

    for (int i = 0; i < ht->size; i++) ht->table[i] = -1;

    for (int i = 0; i < old_size; i++) {
        if (old_table[i] != -1) {
            int key = old_table[i];
            int index = hash(key, ht->size);
            while (ht->table[index] != -1) {
                index = (index + 1) % ht->size;
            }
            ht->table[index] = key;
            ht->count++;
        }
    }
    free(old_table);
}

void insertRehashing(HashTable* ht, int key) {
    if (ht->count >= ht->size * LOAD_FACTOR) {
        rehash(ht);
    }
    int index = hash(key, ht->size);
    while (ht->table[index] != -1) {
        index = (index + 1) % ht->size;
    }
    ht->table[index] = key;
    ht->count++;
}

void displayRehashing(HashTable* ht) {
    for (int i = 0; i < ht->size; i++) {
        if (ht->table[i] != -1)
            printf("Index %d: %d\n", i, ht->table[i]);
        else
            printf("Index %d: \n", i);
    }
}

int main() {
    int choice, key, method;
    int hash_table_open[TABLE_SIZE];
    Node* hash_table_chain[TABLE_SIZE] = {NULL};
    HashTable ht;

    ht.size = INITIAL_SIZE;
    ht.count = 0;
    ht.table = (int*)malloc(ht.size * sizeof(int));
    for (int i = 0; i < ht.size; i++) ht.table[i] = -1;
    for (int i = 0; i < TABLE_SIZE; i++) hash_table_open[i] = -1;

    while (1) {
        printf("\nMenu:\n1. Insert\n2. Display\n3. Exit\nChoose an option: ");
        scanf("%d", &choice);

        if (choice == 3) {
            free(ht.table);
            printf("Exiting...\n");
            break;
        }

        printf("Choose method: 1. Open Addressing 2. Chaining 3. Rehashing: ");
        scanf("%d", &method);

        if (choice == 1) {
            printf("Enter key to insert: ");
            scanf("%d", &key);

            if (method == 1) {
                insertOpenAddressing(hash_table_open, key);
            } else if (method == 2) {
                insertChaining(hash_table_chain, key);
            } else if (method == 3) {
                insertRehashing(&ht, key);
            } else {
                printf("Invalid method\n");
            }
        } else if (choice == 2) {
            if (method == 1) {
                displayOpenAddressing(hash_table_open);
            } else if (method == 2) {
                displayChaining(hash_table_chain);
            } else if (method == 3) {
                displayRehashing(&ht);
            } else {
                printf("Invalid method\n");
            }
        } else {
            printf("Invalid choice\n");
        }
    }

    return 0;
}
